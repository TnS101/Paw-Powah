// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

namespace Persistence.Migrations.Paw
{
    [DbContext(typeof(PawContext))]
    [Migration("20200702132613_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Game.Combat.BattleClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Armor")
                        .HasColumnType("float");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeed")
                        .HasColumnType("float");

                    b.Property<double>("CritChance")
                        .HasColumnType("float");

                    b.Property<double>("CurrentHP")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMana")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<double>("HealthRegen")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MagicPower")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegen")
                        .HasColumnType("float");

                    b.Property<double>("MaxHP")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<double>("MovementSpeed")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<double>("Resistance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Domain.Entities.Game.Combat.Kind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("IncreaseAmount")
                        .HasColumnType("float");

                    b.Property<string>("IncreaseStatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Kinds");
                });

            modelBuilder.Entity("Domain.Entities.Game.Combat.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassId")
                        .HasColumnType("int");

                    b.Property<double>("Cooldown")
                        .HasColumnType("float");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int?>("EnemyId")
                        .HasColumnType("int");

                    b.Property<long?>("EnemyId1")
                        .HasColumnType("bigint");

                    b.Property<int?>("KindId")
                        .HasColumnType("int");

                    b.Property<double>("ManaRequirement")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Ticks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("EnemyId1");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Amulet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AttackSpeedIncrease")
                        .HasColumnType("float");

                    b.Property<double>("BuffAmount")
                        .HasColumnType("float");

                    b.Property<double>("BuffDuration")
                        .HasColumnType("float");

                    b.Property<string>("BuffStatType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<double>("Cooldown")
                        .HasColumnType("float");

                    b.Property<double>("CritChanceIncrease")
                        .HasColumnType("float");

                    b.Property<double>("HealthIncrease")
                        .HasColumnType("float");

                    b.Property<double>("HealthRegenIncrease")
                        .HasColumnType("float");

                    b.Property<double>("ManaIncrease")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegenIncrease")
                        .HasColumnType("float");

                    b.Property<double>("MovementSpeedIncrease")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Amulets");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("ArmorValue")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeedIncrease")
                        .HasColumnType("float");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<double>("CritChanceIncrease")
                        .HasColumnType("float");

                    b.Property<double>("HealthIncrease")
                        .HasColumnType("float");

                    b.Property<double>("HealthRegenIncrease")
                        .HasColumnType("float");

                    b.Property<double>("ManaIncrease")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegenIncrease")
                        .HasColumnType("float");

                    b.Property<double>("MovementSpeedIncrease")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("ResistanceValue")
                        .HasColumnType("float");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("Slot")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Armors");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Consumeable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<int>("Charges")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("RegenAmount")
                        .HasColumnType("float");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("StatRegenType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Consumeables");
                });

            modelBuilder.Entity("Domain.Entities.Game.Items.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AttackSpeed")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeedIncrease")
                        .HasColumnType("float");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<double>("CritChanceIncrease")
                        .HasColumnType("float");

                    b.Property<double>("Damage")
                        .HasColumnType("float");

                    b.Property<double>("HealthIncrease")
                        .HasColumnType("float");

                    b.Property<double>("HealthRegenIncrease")
                        .HasColumnType("float");

                    b.Property<double>("ManaIncrease")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegenIncrease")
                        .HasColumnType("float");

                    b.Property<double>("MovementSpeedIncrease")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.GeneratedEnemySpells", b =>
                {
                    b.Property<long>("GeneratedEnemyId")
                        .HasColumnType("bigint");

                    b.Property<int>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("GeneratedEnemyId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("GeneratedEnemiesSpells");
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerAmulets", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("AmuletId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "AmuletId");

                    b.HasIndex("AmuletId");

                    b.ToTable("PlayersAmulets");
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerArmors", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "ArmorId");

                    b.HasIndex("ArmorId");

                    b.ToTable("PlayersArmors");
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerConsumeables", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ConsumeableId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "ConsumeableId");

                    b.HasIndex("ConsumeableId");

                    b.ToTable("PlayersConsumeables");
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerSpells", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("SpellId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "SpellId");

                    b.HasIndex("SpellId");

                    b.ToTable("PlayersSpells");
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerWeapons", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("PlayersWeapons");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Enemy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Armor")
                        .HasColumnType("float");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeed")
                        .HasColumnType("float");

                    b.Property<double>("CritChance")
                        .HasColumnType("float");

                    b.Property<double>("HealthRegen")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MagicPower")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegen")
                        .HasColumnType("float");

                    b.Property<double>("MaxHP")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<double>("MovementSpeed")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("Resistance")
                        .HasColumnType("float");

                    b.Property<double>("Tenacity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Enemies");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.GeneratedEnemy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Armor")
                        .HasColumnType("float");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeed")
                        .HasColumnType("float");

                    b.Property<double>("CritChance")
                        .HasColumnType("float");

                    b.Property<double>("CurrentHP")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMana")
                        .HasColumnType("float");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<double>("HealthRegen")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRooted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStunned")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double>("MagicPower")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegen")
                        .HasColumnType("float");

                    b.Property<double>("MaxHP")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<double>("MovementSpeed")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Resistance")
                        .HasColumnType("float");

                    b.Property<double>("Tenacity")
                        .HasColumnType("float");

                    b.Property<double>("XPReward")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("GeneratedEnemies");
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Armor")
                        .HasColumnType("float");

                    b.Property<double>("AttackPower")
                        .HasColumnType("float");

                    b.Property<double>("AttackSpeed")
                        .HasColumnType("float");

                    b.Property<bool>("BootsAreEquipped")
                        .HasColumnType("bit");

                    b.Property<bool>("ChestIsEquipped")
                        .HasColumnType("bit");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<double>("CritChance")
                        .HasColumnType("float");

                    b.Property<double>("CurrentHP")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMana")
                        .HasColumnType("float");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<double>("HealthRegen")
                        .HasColumnType("float");

                    b.Property<bool>("HelmetIsEquipped")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InventoryCapacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeared")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRooted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSilenced")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStunned")
                        .HasColumnType("bit");

                    b.Property<int>("KindId")
                        .HasColumnType("int");

                    b.Property<bool>("LeggingsAreEquipped")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<double>("MagicPower")
                        .HasColumnType("float");

                    b.Property<double>("ManaRegen")
                        .HasColumnType("float");

                    b.Property<double>("MaxHP")
                        .HasColumnType("float");

                    b.Property<double>("MaxMana")
                        .HasColumnType("float");

                    b.Property<double>("MovementSpeed")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<double>("Resistance")
                        .HasColumnType("float");

                    b.Property<double>("Tenacity")
                        .HasColumnType("float");

                    b.Property<double>("XP")
                        .HasColumnType("float");

                    b.Property<double>("XPCap")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("KindId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("LevelScore")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Game.Combat.Kind", b =>
                {
                    b.HasOne("Domain.Entities.Game.Combat.Spell", "Spell")
                        .WithOne("Kind")
                        .HasForeignKey("Domain.Entities.Game.Combat.Kind", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Combat.Spell", b =>
                {
                    b.HasOne("Domain.Entities.Game.Combat.BattleClass", "Class")
                        .WithMany("Spells")
                        .HasForeignKey("ClassId");

                    b.HasOne("Domain.Entities.Game.Units.Enemy", "Enemy")
                        .WithMany("Spells")
                        .HasForeignKey("EnemyId1");
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.GeneratedEnemySpells", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.GeneratedEnemy", "GeneratedEnemy")
                        .WithMany("GeneratedEnemySpells")
                        .HasForeignKey("GeneratedEnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Combat.Spell", "Spell")
                        .WithMany("GeneratedEnemySpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerAmulets", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Amulet", "Amulet")
                        .WithMany("PlayerAmulets")
                        .HasForeignKey("AmuletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Units.Player", "Player")
                        .WithMany("PlayerAmulets")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerArmors", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Armor", "Armor")
                        .WithMany("PlayerArmors")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Units.Player", "Player")
                        .WithMany("PlayerArmors")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerConsumeables", b =>
                {
                    b.HasOne("Domain.Entities.Game.Items.Consumeable", "Consumeable")
                        .WithMany("PlayerConsumeables")
                        .HasForeignKey("ConsumeableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Units.Player", "Player")
                        .WithMany("PlayerConsumeables")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerSpells", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.Player", "Player")
                        .WithMany("PlayerSpells")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Combat.Spell", "Spell")
                        .WithMany("PlayerSpells")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.ManyToMany.PlayerWeapons", b =>
                {
                    b.HasOne("Domain.Entities.Game.Units.Player", "Player")
                        .WithMany("PlayerWeapons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Items.Weapon", "Weapon")
                        .WithMany("PlayerWeapons")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Game.Units.Player", b =>
                {
                    b.HasOne("Domain.Entities.Game.Combat.BattleClass", "Class")
                        .WithMany("Players")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Game.Combat.Kind", "Kind")
                        .WithMany("Players")
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
